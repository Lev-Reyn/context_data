Lesson 6.
Lists. Working with strings.

Lesson plan.
Lists .
The split() and join() methods
Slices
String formatting
Lists
	When we introduced tuples, we talked about how they are immutable containers of different data types. Today we'll talk about a powerful tool, a data type called a list. Lists are also used to store data, but unlike tuples, they are immutable. This means that you can add, delete, as well as replace and sort the elements of a list. An empty list is declared with square brackets.
	a = []
	You can also initialize a list with preset values:
	even_numbers = [2, 4, 6, 8, 10]
	There are several ways to extend our list. Let's look at some of them:
Add an item to the end of the list. The append() method is applied to the list, and the item to be added is specified in brackets.
	even_numbers.append(12)
	Note: The append() instruction differs from the familiar functions. Append() is "appended" to an object (in this case, a list) with a point. Commands of this kind are called methods. We will speak about it in more detail later.

 2) List expansion.
	even_numbers + [12, 14, 16, 18, 20]
	A more preferred implementation using the extend() method:
	even_numbers.extend([12, 14, 16, 18, 20])
      3) Getting a list with n fixed elements.
      ones = [1] * 100
	# get a list of a hundred ones


A specific list item can be accessed the same way as in tuples - by a numeric index. Once again, note that indexing starts with zero. However, referring to an element of the list by an index, it is possible not only to look at it, but also to replace it with another element.
powers_of_ten = [10, 100, 1000]
powers_of_ten.append(42) # we made a mistake and did not add a degree of ten to the list
powers_of_ten[-1] = 10 ** 4 # we correct the error


	In Python, you can use negative indices to refer to elements in a collection (for example, characters in a string or elements in a tuple/list). In the example above, we used an index of -1, which is a way of referring to the last item in a list. Similarly, you can use -2, -3, and so on.

	Try replacing a character in a string in a similar way. What will happen?

	Interesting:
A particular character in a string can also be accessed by index. For example:
     s = "Hello!"
     print(s[1], s[-2]) # will print "e" first, then "o"

     2) Just as a string can be converted to a tuple using tuple(), you can convert it to a list using list():

       s = "Any string"
	print(list(s))  # will print ["A", "n", "y", " ", "s", "t", "r", "i", "n", "g"]

It is worth noting that the elements of a list can be objects of any data type, and it is not necessary that the elements be of only one type. You can create two-dimensional lists ("list within a list"), three-dimensional lists, and even n-dimensional lists.

The "Keep Even" Task
The "Median" task
The "Process a list" task.
split() and join()
Often, when a string and a list are used in conjunction, split() and join() methods are used (remember that we have already met one method, append()).
	The split() method applies to strings and "splits" (from the word split) a given string into a list of substring strings. You can pass a substring in parentheses to split the string (if you don't pass anything, the string is split by spaces). While append() changes the list, split() returns the value, the list (just as max(), for example, returns a number).
s = "This is a string with spaces"
s = s.split()
# s = ["This", "is", "a", "string", "with", "spaces"]


The join() method is its opposite - it returns a string "joined" (or "glued") from a list of strings through some given string. Suppose we have a list of strings s, taken from the previous example. Let's modify the string:

s = "!".join(s)
# s = "This!is!a!string!with!spaces"


	We "joined" the substring using the "!" symbol.

The "Slow down, I'm writing it down!" task.
	Task "A politician's cheat sheet."
The Boy Who Cried Python" task.
	Task "Login for registration."
	"Split IP" Task.
	The "Basic Lessons" Task.

	The use of slices in lists is similar to the above examples.
	In general, their use can be represented as: s[start:stop:step]. If you look closely, a similar concept can be observed in the for loop (actually, you can do without slices by using loops, but it is much less comfortable).

	The "Aggressive Marketing" Task
	The "Primitive Cipher" Task
String formatting
	It's impossible not to mention the flexible and useful string formatting tool. It is much more convenient than the usual concatenation and is used in most cases. The method format() allows you to insert into a pre-prepared string the variables you need in
in the order you want. You write a plain string in quotation marks, but you insert curly brackets instead of the values you want to insert. The format() method is applied to this string; the parentheses indicate the arguments to be inserted in place of the curly braces. Let's solve the "Favorite Book" problem (https://stepik.org/lesson/142208/step/8?unit=116414) using format():
	author, book = input(), input()
      print("{} the bestselling author {} has a new book out! Hurry up and buy it from Pythonist!".format(author, book))

 	Other scenarios for working with format are also possible. For example, you can change the order of the arguments.
    first, second, third = input(), input(), input()
    # is the usual order, you don't have to write the indexes in curly brackets
    print("Recipe: add {0} first, then {1}, then {2} at the end".format(first, second, third))
    # changed the order
    print("Recipe: add {2} first, then {0}, then {1} at the end".format(first, second, third))



 	See the documentation for a complete list of use cases:
https://docs.python.org/3/library/string.html#format-examples

	Homework:
	Squares in Reverse Order Task.
	The "Literate Logging" task
	Task "Reply from server".
	Task "Reconstruct Expression".

Now when I write "create 5 questions on this article," you create 5 questions for me. You cannot write the same questions. Here's an example of performance:
create 5 questions on this article
What is the difference between a list and a tuple in python? 

What method is used to add an item to a list?

What are some ways to extend a list?

What does this code print([5] * 20) print?

How does negative indexing work in lists?

create 2 questions on this article
What does the split method take as an argument?

Solve a python problem: Remove the dots from the entered IP address. Output first four numbers separated by a space and then the sum of the resulting numbers.
Sample Input:
192.168.0.1
Sample Output:
192 168 0 1
361

create 3 questions on this article
What is the method used to reverse a string?

How can you refer to the last item in a list?

What does the join method do?

create 4 questions on this article
What is the main difference between tuples and lists?

What type of objects can be in a list?

How can you find the length of a list?

Is it possible to create two dimensional lists?

create 6 questions on this article
What does the format method do?

What is an example of string formatting?

How can you change the order of arguments when using the format method?

What is the purpose of the extend method?

What is the output of s = "Any string"; list(s)?

What data type is returned when the split method is called?


Now write questions related to the article written below

Lesson 5.
The while loop and logical variables.

Lesson plan
Logic variables
The while loop
Break and continue operators
"Recall Everything: Learning Algorithms
Logic variables
To continue our exploration of data types in Python (so far we've covered integers, real numbers, strings, and tuples), we'll focus on logical variables. Logic, or Boolean (after the mathematician George Boole), refers to variables that can take only two values, 1 or 0, which are written as True or False respectively. This is convenient because it takes less memory, and it is also convenient to store the truth or falsity of a statement in this representation. For example, you develop an online game and you need to display whether a player is online at a given time. You can have a logical variable is_online and change it to 1 when the player logs in and 0 when he logs out. 
If you think of comparison operators, you know that they return a logical expression. You can test this by defining variables a and b and writing print(a == b).
The "Pied Piper" problem
The while loop
Recall that we used the for loop when we knew exactly how many times we wanted to repeat the code referring to the loop. However, the while loop allows us to iterate as long as the condition we set is met. A sample use in general looks like this:
while condition:
    code block

When the while loop is executed, the condition is checked first. If it's false, the loop is stopped, and if it's true, a block of code is executed, after which the condition is checked again. This continues until the condition is true.
Let's count the number of digits of a number using the while loop:
n = int(input())
length = 0
while n > 0:
	n //= 10
	length += 1
print("Number length -", length)

	
	The task "Password validation. Step 2."
	The "Spontaneous Sum" task.
	The "Writer's Inspiration. Stage 1."
	Task "Learning to save spends".

break, continue, and else
The break and continue operators are used to control the code in the while loop. As soon as the interpreter reaches break in the while loop, there is an immediate exit from the loop. You can put break, for example, in a condition inside a loop.
languages = ("Java", "Python", "C++", "PHP", "Pascal", "Ruby")
i = 0
while i < len(languages):
    if languages[i] == "PHP":
        print("NO!")
	  break
    print("Cool!")
    i += 1 

	
	The continue statement immediately begins the next iteration of the loop, bypassing the rest of the code in the block.
for i in range(10):
    print('Loading... Wait.')
    if i == 3:
        print('Oops... Error. Pretend it never happened.')
        continue
    print('uploaded', i * 10, 'percent')
print('Loading completed!')


else is used in turn with break. Code placed in else is NOT executed if the loop is exited because of break.
	These operators are used rather seldom because they can almost always be replaced by a smart condition, but sometimes their use is still justified.

	The Hunt of Pied Piper" task

Algorithms
	At the moment, knowledge of algorithms is not a decisive factor for many programmers that determines the possibility/impossibility to successfully complete a task. There are several reasons for this: first, many libraries (an extensive set of tools - we will go through that in the second half of the year) provide quick access to basic functions and features, so many decide not to reinvent the wheel and "fill their heads" with things they will probably never use, and second, many developers are not faced with situations where algorithms are needed at all (they include front-enders, database administrators, 1C programmers). Hence the argument "which is better?" concerning industrial (development of applications for the user) and olympic programming. Obviously this question can not be answered unambiguously. It is up to you to learn or not to learn algorithms. We will only touch a few fundamental algorithms, which are necessary to know. Having learned the algorithm, you can implement it in any programming language, knowing its syntax.
Read about different points of view on the subject here:
https://habr.com/post/279453/
https://habr.com/post/279651/
Below is a cheat sheet of the main algorithms:
Finding the maximum
numbers = (1, 2, 3, ..., n) # tuple of numbers
max_number = numbers[0]
i = 1
while i < len(numbers):
    if numbers[i] > max_number:
        max_number = numbers[i]
    i += 1
print(max_number)

	
	Find minimum
numbers = (1, 2, 3, ..., n) # tuple of numbers
min_number = numbers[0]
i = 1
while i < len(numbers):
    if numbers[i] < min_number:
        min_number = numbers[i]
    i += 1
print(min_number)


	Finding the sum
numbers = (1, 2, 3, ..., n) # tuple of numbers
sum = 0
for number in numbers:
    sum += number
print(sum)


	Check for simplicity
d = 2
while d * d <= n and n % d != 0:
    d += 1
print(d * d > n)
Finding NOD (Euclidian algorithm)

a, b = int(input()), int(input())
while b != 0:
    a, b = b, a % b
print(a)

create 3 questions on this article
When can we not use the for loop?

What is the advantage of the while loop over the for loop? 

What is the Euclidian algorithm used for?

create 9 questions on this article

What is the purpose of the break and continue operators?

What data type are logic variables?

What are logic variables used for?

What happens when a comparison operator is used?

What will the variable length be after the while loop? 
n = 2 ** 8
length = 0
while n > 0:
	n //= 10
	length += 1

Describe how the while loop works 

What is the print statement used in the while loop example?

How does else work after the while loop?


you should only write questions on the most recent article

the following is an incorrect answer, since the material was taken from the topmost article:
create 4 questions on this article
What is an example of an algorithm?

What does the while loop allow you to do?

What operators are used to control the code in the while loop?

What is the output of the following code: 
numbers = (1, 2, 3)
max_number = numbers[0]
i = 1
while i < len(numbers):
    if numbers[i] > max_number:
        max_number = numbers[i]
    i += 1
print(max_number)


don't talk about the cheat sheet, you can make up questions based on the code

create 3 questions on this article
