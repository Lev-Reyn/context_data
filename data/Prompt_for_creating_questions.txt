Lesson 6.
Lists. Working with strings.

Lesson plan.
Lists .
The split() and join() methods
Slices
String formatting
Lists
	When we introduced tuples, we talked about how they are immutable containers of different data types. Today we'll talk about a powerful tool, a data type called a list. Lists are also used to store data, but unlike tuples, they are immutable. This means that you can add, delete, as well as replace and sort the elements of a list. An empty list is declared with square brackets.
	a = []
	You can also initialize a list with preset values:
	even_numbers = [2, 4, 6, 8, 10]
	There are several ways to extend our list. Let's look at some of them:
Add an item to the end of the list. The append() method is applied to the list, and the item to be added is specified in brackets.
	even_numbers.append(12)
	Note: The append() instruction differs from the familiar functions. Append() is "appended" to an object (in this case, a list) with a point. Commands of this kind are called methods. We will speak about it in more detail later.

 2) List expansion.
	even_numbers + [12, 14, 16, 18, 20]
	A more preferred implementation using the extend() method:
	even_numbers.extend([12, 14, 16, 18, 20])
      3) Getting a list with n fixed elements.
      ones = [1] * 100
	# get a list of a hundred ones


A specific list item can be accessed the same way as in tuples - by a numeric index. Once again, note that indexing starts with zero. However, referring to an element of the list by an index, it is possible not only to look at it, but also to replace it with another element.
powers_of_ten = [10, 100, 1000]
powers_of_ten.append(42) # we made a mistake and did not add a degree of ten to the list
powers_of_ten[-1] = 10 ** 4 # we correct the error


	In Python, you can use negative indices to refer to elements in a collection (for example, characters in a string or elements in a tuple/list). In the example above, we used an index of -1, which is a way of referring to the last item in a list. Similarly, you can use -2, -3, and so on.

	Try replacing a character in a string in a similar way. What will happen?

	Interesting:
A particular character in a string can also be accessed by index. For example:
     s = "Hello!"
     print(s[1], s[-2]) # will print "e" first, then "o"

     2) Just as a string can be converted to a tuple using tuple(), you can convert it to a list using list():

       s = "Any string"
	print(list(s))  # will print ["A", "n", "y", " ", "s", "t", "r", "i", "n", "g"]

It is worth noting that the elements of a list can be objects of any data type, and it is not necessary that the elements be of only one type. You can create two-dimensional lists ("list within a list"), three-dimensional lists, and even n-dimensional lists.

The "Keep Even" Task
The "Median" task
The "Process a list" task.
split() and join()
Often, when a string and a list are used in conjunction, split() and join() methods are used (remember that we have already met one method, append()).
	The split() method applies to strings and "splits" (from the word split) a given string into a list of substring strings. You can pass a substring in parentheses to split the string (if you don't pass anything, the string is split by spaces). While append() changes the list, split() returns the value, the list (just as max(), for example, returns a number).
s = "This is a string with spaces"
s = s.split()
# s = ["This", "is", "a", "string", "with", "spaces"]


The join() method is its opposite - it returns a string "joined" (or "glued") from a list of strings through some given string. Suppose we have a list of strings s, taken from the previous example. Let's modify the string:

s = "!".join(s)
# s = "This!is!a!string!with!spaces"


	We "joined" the substring using the "!" symbol.

The "Slow down, I'm writing it down!" task.
	Task "A politician's cheat sheet."
The Boy Who Cried Python" task.
	Task "Login for registration."
	"Split IP" Task.
	The "Basic Lessons" Task.

	The use of slices in lists is similar to the above examples.
	In general, their use can be represented as: s[start:stop:step]. If you look closely, a similar concept can be observed in the for loop (actually, you can do without slices by using loops, but it is much less comfortable).

	The "Aggressive Marketing" Task
	The "Primitive Cipher" Task
String formatting
	It's impossible not to mention the flexible and useful string formatting tool. It is much more convenient than the usual concatenation and is used in most cases. The method format() allows you to insert into a pre-prepared string the variables you need in
in the order you want. You write a plain string in quotation marks, but you insert curly brackets instead of the values you want to insert. The format() method is applied to this string; the parentheses indicate the arguments to be inserted in place of the curly braces. Let's solve the "Favorite Book" problem (https://stepik.org/lesson/142208/step/8?unit=116414) using format():
	author, book = input(), input()
      print("{} the bestselling author {} has a new book out! Hurry up and buy it from Pythonist!".format(author, book))

 	Other scenarios for working with format are also possible. For example, you can change the order of the arguments.
    first, second, third = input(), input(), input()
    # is the usual order, you don't have to write the indexes in curly brackets
    print("Recipe: add {0} first, then {1}, then {2} at the end".format(first, second, third))
    # changed the order
    print("Recipe: add {2} first, then {0}, then {1} at the end".format(first, second, third))



 	See the documentation for a complete list of use cases:
https://docs.python.org/3/library/string.html#format-examples

	Homework:
	Squares in Reverse Order Task.
	The "Literate Logging" task
	Task "Reply from server".
	Task "Reconstruct Expression".

Now when I write "create 5 questions on this article," you create 5 questions for me. You cannot write the same questions. Here's an example of performance:
create 5 questions on this article
What is the difference between a list and a tuple in python? 

What method is used to add an item to a list?

What are some ways to extend a list?

What does this code print([5] * 20) print?

How does negative indexing work in lists?

create 2 questions on this article
What does the split method take as an argument?

Solve a python problem: Remove the dots from the entered IP address. Output first four numbers separated by a space and then the sum of the resulting numbers.
Sample Input:
192.168.0.1
Sample Output:
192 168 0 1
361

create 3 questions on this article
What is the method used to reverse a string?

How can you refer to the last item in a list?

What does the join method do?

create 4 questions on this article
What is the main difference between tuples and lists?

What type of objects can be in a list?

How can you find the length of a list?

Is it possible to create two dimensional lists?

create 6 questions on this article
What does the format method do?

What is an example of string formatting?

How can you change the order of arguments when using the format method?

What is the purpose of the extend method?

What is the output of s = "Any string"; list(s)?

What data type is returned when the split method is called?


Now write questions related to the article written below

Lesson 5.
The while loop and logical variables.

Lesson plan
Logic variables
The while loop
Break and continue operators
"Recall Everything: Learning Algorithms
Logic variables
To continue our exploration of data types in Python (so far we've covered integers, real numbers, strings, and tuples), we'll focus on logical variables. Logic, or Boolean (after the mathematician George Boole), refers to variables that can take only two values, 1 or 0, which are written as True or False respectively. This is convenient because it takes less memory, and it is also convenient to store the truth or falsity of a statement in this representation. For example, you develop an online game and you need to display whether a player is online at a given time. You can have a logical variable is_online and change it to 1 when the player logs in and 0 when he logs out. 
If you think of comparison operators, you know that they return a logical expression. You can test this by defining variables a and b and writing print(a == b).
The "Pied Piper" problem
The while loop
Recall that we used the for loop when we knew exactly how many times we wanted to repeat the code referring to the loop. However, the while loop allows us to iterate as long as the condition we set is met. A sample use in general looks like this:
while condition:
    code block

When the while loop is executed, the condition is checked first. If it's false, the loop is stopped, and if it's true, a block of code is executed, after which the condition is checked again. This continues until the condition is true.
Let's count the number of digits of a number using the while loop:
n = int(input())
length = 0
while n > 0:
	n //= 10
	length += 1
print("Number length -", length)

	
	The task "Password validation. Step 2."
	The "Spontaneous Sum" task.
	The "Writer's Inspiration. Stage 1."
	Task "Learning to save spends".

break, continue, and else
The break and continue operators are used to control the code in the while loop. As soon as the interpreter reaches break in the while loop, there is an immediate exit from the loop. You can put break, for example, in a condition inside a loop.
languages = ("Java", "Python", "C++", "PHP", "Pascal", "Ruby")
i = 0
while i < len(languages):
    if languages[i] == "PHP":
        print("NO!")
	  break
    print("Cool!")
    i += 1 

	
	The continue statement immediately begins the next iteration of the loop, bypassing the rest of the code in the block.
for i in range(10):
    print('Loading... Wait.')
    if i == 3:
        print('Oops... Error. Pretend it never happened.')
        continue
    print('uploaded', i * 10, 'percent')
print('Loading completed!')


else is used in turn with break. Code placed in else is NOT executed if the loop is exited because of break.
	These operators are used rather seldom because they can almost always be replaced by a smart condition, but sometimes their use is still justified.

	The Hunt of Pied Piper" task

Algorithms
	At the moment, knowledge of algorithms is not a decisive factor for many programmers that determines the possibility/impossibility to successfully complete a task. There are several reasons for this: first, many libraries (an extensive set of tools - we will go through that in the second half of the year) provide quick access to basic functions and features, so many decide not to reinvent the wheel and "fill their heads" with things they will probably never use, and second, many developers are not faced with situations where algorithms are needed at all (they include front-enders, database administrators, 1C programmers). Hence the argument "which is better?" concerning industrial (development of applications for the user) and olympic programming. Obviously this question can not be answered unambiguously. It is up to you to learn or not to learn algorithms. We will only touch a few fundamental algorithms, which are necessary to know. Having learned the algorithm, you can implement it in any programming language, knowing its syntax.
Read about different points of view on the subject here:
https://habr.com/post/279453/
https://habr.com/post/279651/
Below is a cheat sheet of the main algorithms:
Finding the maximum
numbers = (1, 2, 3, ..., n) # tuple of numbers
max_number = numbers[0]
i = 1
while i < len(numbers):
    if numbers[i] > max_number:
        max_number = numbers[i]
    i += 1
print(max_number)

	
	Find minimum
numbers = (1, 2, 3, ..., n) # tuple of numbers
min_number = numbers[0]
i = 1
while i < len(numbers):
    if numbers[i] < min_number:
        min_number = numbers[i]
    i += 1
print(min_number)


	Finding the sum
numbers = (1, 2, 3, ..., n) # tuple of numbers
sum = 0
for number in numbers:
    sum += number
print(sum)


	Check for simplicity
d = 2
while d * d <= n and n % d != 0:
    d += 1
print(d * d > n)
Finding NOD (Euclidian algorithm)

a, b = int(input()), int(input())
while b != 0:
    a, b = b, a % b
print(a)

create 3 questions on this article
When can we not use the for loop?

What is the advantage of the while loop over the for loop? 

What is the Euclidian algorithm used for?

create 9 questions on this article

What is the purpose of the break and continue operators?

What data type are logic variables?

What are logic variables used for?

What happens when a comparison operator is used?

What will the variable length be after the while loop? 
n = 2 ** 8
length = 0
while n > 0:
	n //= 10
	length += 1

Describe how the while loop works 

What is the print statement used in the while loop example?

How does else work after the while loop?


you should only write questions on the most recent article

the following is an incorrect answer, since the material was taken from the topmost article:
create 4 questions on this article
What is an example of an algorithm?

What does the while loop allow you to do?

What operators are used to control the code in the while loop?

What is the output of the following code: 
numbers = (1, 2, 3)
max_number = numbers[0]
i = 1
while i < len(numbers):
    if numbers[i] > max_number:
        max_number = numbers[i]
    i += 1
print(max_number)


don't talk about the cheat sheet, you can make up questions based on the code


Now you have to create questions on the following article, which is written below:
When you connect a device to the network and the Internet, organizations open the door to hackers who can penetrate their network and cause damage. There are many organizations that only use a firewall on their network and therefore think that both their internal network and their users are protected from Internet threats. The firewall, as the only network device deployed between the internal network and the Internet, is simply the first layer of security for the entire organization. Many people wonder if a firewall is not enough to filter malicious inbound and outbound traffic.

Years ago, the answer would have been an unequivocal yes. However, since hackers are always looking for new strategies to penetrate the network, we cannot rely on just one layer of security to protect our assets. The answer to this question is no longer a clear "yes" simply because there are many types of traffic that use insecure network protocols to exchange messages between source and destination.

Below are just a few of the many questions a cybersecurity professional should ask:

Does the organization actively monitor Domain Name System (DNS) messages for threats?
Does the organization have any security solutions in place to protect incoming and outgoing company emails?
If a cyberattack occurs on the network, are there systems in place to proactively block and alert the IT department?
Does the organization have a dedicated security team or person to manage the overall security of the entire enterprise?
Are there any security policies and technical controls in place to protect the internal network?
Many security vendors use marketing strategies and buzzwords to influence potential customers to purchase their all-in-one security devices. The key point that many uninformed customers miss is how the security solution or product will protect all users and all types of traffic, protect them when using insecure protocols, and so on. An example would be the use of endpoint protection. You can consider this solution as antivirus software with centralized management for the administrator. Although many endpoint protection solutions offer advanced features. This is still the first layer of security that simply protects the host.

Not all endpoint protection solutions or anti-viruses protect against threats such as email. Simply put, an organization cannot rely on just one approach to protect its assets, it needs a layered approach known as Defense in Depth (DiD).

The DiD strategy implies that a single layer of security should not be used as the only countermeasure against cyberattacks. If this single layer fails to protect the network, then all (assets) will be open to hackers. DiD implements a layered approach to protect all assets from different types of cyberattacks, where if one layer cannot protect an asset, then there is another layer to provide security.

This layering tactic was invented at the National Security Agency (NSA) as a comprehensive approach to information and electronic security. And originally, it is a military strategy that seeks to force an attacker to spend as much time as possible to overcome each layer of defense, rather than to prevent an adversary from attacking.

The concept of Defense in Depth divides the organization of infrastructure defense into three controllable parts:

Physical: This includes all measures to limit physical access to the IT infrastructure by unauthorized persons. For example, office security guards, access control systems, video surveillance cameras, alarms, telecommunication cabinets with locks, and so on.
Technical: this includes all hardware and software information security products designed to control network access to information system objects, firewalls, anti-virus protection for workstations, proxy servers, authentication and authorization systems.
Administrative: this includes all information security policies and procedures adopted by the organization. These documents are intended to regulate protection management, distribution and processing of critical information, the use of software and hardware in the company, as well as employee interaction with the information system, third-party organizations and other external entities.
The tiered approach is like defending a king in his castle. If an attack occurs, the invaders will need to go through several layers of defense, including guards at the entrance and other obstacles, before they can get to the king (the asset).

To better understand the importance of DiD, let's delve deeper into the three basic principles of information security, the so-called CIA triad:

Confidentiality.
Integrity
Availability
Each principle plays a vital role in the information security of any organization. In the following subsection, you will learn about the characteristics of confidentiality, integrity and availability, and how they are used in the industry to secure our networks.

PRIVACY
As more and more people connect to networks and share information, whether it's their private network at home, the corporate network at the office, or even the Internet, privacy is a major concern.

Every day, organizations generate new data by sending and receiving messages between devices. Imagine an organization that uses email as its only messaging platform. Each person creates an e-mail message, which is data, and that data uses some storage space on the local system. When the recipient receives the email, it is stored on the recipient's computer. It is important that only those to whom the message is addressed receive it; outsiders should not see it.

When this data is transmitted over the network, it can also be intercepted. So the security professional should also consider the following questions: Is the connection secure? Is the communication protocol secure? Is the network secure?
Confidentiality ensures that messages and other data are kept secret from unauthorized persons or devices. In information technology, confidentiality comes in the form of data encryption. People use devices to perform tasks, whether it's sending email, downloading a file, or even sending a messenger message from a smartphone. It's important to always protect these messages.

Data usually exists in the following states:

Data at rest.
Data in motion (in transit)
Data in use.
Data at rest is data that is not used by either the application or the system. They are currently stored on media, such as a hard disk drive (HDD) on a local or remote system. When data is dormant, it is vulnerable to attackers trying to either steal or alter it. Security professionals are implementing both authentication methods and encryption algorithms to protect any data at rest. An example is the use of BitLocker in Microsoft's Windows 10 operating system, which allows the administrator to create an encrypted container and then the user can place files in that special memory area and lock it.

Once the contents of BitLocker are locked (closed) by the user, both the container and its contents are encrypted. Consequently, access is granted only if the user provides the correct credentials to open and decrypt the contents. If an attacker steals an encrypted container, they will not be able to view the contents because of the encryption of the data.

Data in motion is defined as data that is transmitted between source and destination. Imagine that there are employees who work remotely or work in a remote location away from the office. These people may need to connect to the corporate network frequently to access network resources, such as when accessing or working with documents on a file server. As cybersecurity professionals, we need to be aware of the types of protections or security mechanisms in place to protect the data transmitted between the user's device and the file server. In addition, devices send and receive messages almost every second, and some of these messages are exchanged using insecure protocols that allow an attacker to intercept messages (data) as they are transmitted over the network. If the data is transmitted over the network in an unencrypted format, an attacker can see the entire contents in plain text and collect sensitive information such as logins and passwords.
These are just a few possible situations that can arise when data is in motion. Some recommended actions are to use secure network protocols whenever possible and ensure that remote employees, use a virtual private network (VPN) to encrypt the traffic between the user device and the corporate network.

To better understand the need for a VPN, imagine that an organization has multiple branch offices and wants to "share" resources from the head office to the remote branch office. Using the Internet is not secure, especially for transferring corporate data between branches. One solution might be to use a Wide Area Network (WAN) provided by an Internet Service Provider (ISP). If an organization decides to use a WAN, it means that you will have to pay for this service, and for some companies, this solution may not be affordable. Alternatively, if the organization has an Internet connection and firewalls are in each office, a security professional can set up a VPN between the two firewall devices. This type of VPN is known as a site-to-site VPN.

The following figure shows a representation of a site-to-site VPN:
As shown in the figure, a site-to-site VPN establishes a secure, encrypted connection between the head office and remote branch offices over the Internet. Consequently, any messages that move between offices are encrypted and sent through the VPN tunnel, protecting the messages from unauthorized users.

There is also another type of VPN - remote access VPN. This type allows the user to establish a VPN tunnel between an endpoint device, such as a laptop, and the organization's firewall. This type of VPN allows employees working at home or on the go to securely connect to the organization's network and access network resources. Keep in mind that a VPN client must be installed on the employee's device, which is used to establish a secure connection between the computer and the corporate firewall.

The following figure shows an example of a remote access VPN:
The data in use is the data that is currently being accessed or used by the application. In this state, the data is most vulnerable. As an example of usable data, imagine that you are opening a PDF document with a PDF reader application. Before the application can successfully open the PDF file, the document must be decrypted if the file is password protected. After entering the correct password, the document will be presented to the user in unencrypted form. It is important to keep the system and applications that access and/or use the data secure at all times.

Thus, privacy is about protecting your assets from unauthorized persons or devices.

PURPOSE
Integrity plays an important role in our daily lives, it is the degree to which the parts are shaped, assembled, and show harmony in the relationship and interaction of the parts. It's a bit philosophical, but the same principle is needed in the network. Imagine that you received a letter from a friend through your local post office and upon opening it, there seems to be nothing wrong with its contents. As the recipient, you might assume that the contents of the letter were unchanged in the delivery process, but how can you verify if the contents have been changed by a person or device along the way? On a network, it is very important to ensure that data or messages are not changed in transit between source and recipient.
Cybersecurity uses special hashing algorithms to help users and devices verify whether a message has or has not been altered in transmission. Hashing algorithms create a one-way cryptographic hash (digest, aka checksum), which is a mathematical representation of the message. This means that only this message can produce the same hash value. Hashing algorithms create a one-way function that makes it nearly impossible to change and determine the content of the message itself.

The following figure shows the hashing process of a message:

The hashing process
As shown in the figure, the message goes through a cryptographic algorithm that creates a one-way hash function for the message. When a user or device wants to send a message to the recipient, both the message and its hash value are packaged together and sent over the network. When the recipient receives the incoming message, it performs its own hash function on the message and computes its hash value.

The recipient then compares the hash value received from the sender with the hash value it calculated. If both hash values match, it means that the message was not modified during transmission and integrity is preserved. However, if the hashes do not match, it indicates that the message has been altered and the recipient will simply delete it. In addition, hashing also helps to ensure that the message has not been corrupted by any network faults or malfunctions.
ACCESSIBILITY
There are types of cyber attacks that block or make it difficult for legitimate users to access a resource. In other words, attackers try to disrupt the availability of data and resources. In cybersecurity, availability ensures that data and resources are always available to users and systems that are allowed access to those resources.

A simple example of a cyber attack that can be used to disrupt network availability is the Distributed Denial of Service (DDoS) attack. This type of attack is launched from multiple geographic locations and targets a single system or network. The attacker sends massive amounts of legitimate requests or other types of traffic to the target, causing the system to overload and become unable to process requests from other users. The goal is to make the target system or network unusable or unavailable to other users.

Cloudflare (www.cloudflare.com) provides unlimited protection against DDoS attacks for users. The administrator can migrate his or her DNS records to Cloudflare to manage DNS services. In this way, Cloudflare sits between the public server and the rest of the Internet. If DDoS traffic is directed at a resource from anywhere in the world, it will have to pass through the Cloudflare network, which will mitigate the attack.

You may think that it is important for attackers to make sure that network resources and data are always available so that they can be hacked or stolen. But in fact, there are attackers whose goal is to make those resources no longer available to users.

Just imagine an intruder hacking into the power management system of your city or neighborhood. If the hacker manages to shut down that system, there will be no electricity, and most consumers and organizations will be affected. In such situations, it is important that professionals implement security measures that can protect critical processes, systems and networks from hacking.
COMBINING THE THREE PRINCIPLES
Some organizations put some principles above others. For example, a company may focus more on protecting its data through various authentication and encryption systems. This principle focuses on privacy. Focusing on one component, such as privacy, more than the others will entail less attention to the others - integrity and/or availability.

You might wonder: and what's the problem here? Imagine that an organization applies the most stringent security measures to prevent any unauthorized access to its systems and network. In order for an authorized user to gain access to these resources, they would need to provide perhaps multiple verifications of their identity, such as with multi-factor authentication (MFA), and even passwords to open files. As a result, access to the resources will be more difficult for everyone, including authorized users, so accessibility will suffer a bit.

The following figure shows the triad of principles and the focus point in the center:
The key is to always strike a balance when implementing confidentiality, integrity and availability in any system and network. It is important to pay equal attention to all major areas simply to ensure that no aspect of information security is lacking.
